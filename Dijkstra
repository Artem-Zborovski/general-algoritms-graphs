#include<iostream>
#include<vector>
#include<queue>
#include<climits>
#include <fstream>
using namespace std;

const long long INF = LLONG_MAX;
priority_queue < pair < long long, int >, vector< pair < long long, int > >, greater<> > q;
vector < vector < pair < long long, long long > > > t;
vector < long long > d;
vector < bool > used;

int main()
{
    ifstream input("input.txt");
    ofstream output("output.txt");
    long long n, m;
    input >> n >> m;
    d.assign(n, INF);
    t.resize(n);
    used.assign(n, 0);
    d[0] = 0;
    for(long long i = 0; i < m; i++)
    {
        long long u, v, w;
        input >> u >> v >> w;
        t[u - 1].push_back({v - 1, w});
        t[v - 1].push_back({u - 1, w});
    }
    q.push({0, 0});
    while(!q.empty())
    {
        long long v = q.top().second;
        q.pop();
        if(used[v]) continue;
        used[v] = 1;
        for(pair < long long, long long > u : t[v])
        {
            long long b = u.first, w = u.second;
            if(!used[b] && d[v] + w < d[b])
            {
                d[b] = d[v] + w;
                q.push({d[b], b});
            }
        }
    }
    output << d[n - 1];
    return 0;
}
